import json
import random
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from PyQt6 import QtWidgets
from PyQt6.QtWidgets import QMainWindow

from FinalProject.ui.SendEmail.SendEmail import Ui_MainWindow


class SendEmailEXT(Ui_MainWindow):
    def setupUi(self, MainWindow):
        super().setupUi(MainWindow)
        self.MainWindow = MainWindow
        self.login_window = None  # Th√™m thu·ªôc t√≠nh ƒë·ªÉ l∆∞u LoginClientEXT
        self.setupSignalAndSlot()
        self.otp = None


    def setupSignalAndSlot(self):
        # K·∫øt n·ªëi c√°c n√∫t b·∫•m
        self.pushButtonSendOTP.clicked.connect(self.send_otp_email)
        self.pushButtonReturn.clicked.connect(self.process_return)

    def check_email_exists(self, email):
        print(f"üìå Ki·ªÉm tra email: {email}")
        email = email.strip().lower()
        all_emails = set()  # S·ª≠ d·ª•ng set ƒë·ªÉ tr√°nh tr√πng l·∫∑p

        # Ki·ªÉm tra file client.json
        try:
            with open(r"../dataset/client.json", "r", encoding="utf-8") as f:
                users = json.load(f)
            client_emails = [user.get("Email", "").strip().lower() for user in users if user.get("Email")]
            all_emails.update(client_emails)
        except FileNotFoundError:
            QtWidgets.QMessageBox.warning(self, "Error", "File client.json not found!")
            print("‚ùå L·ªói: File client.json kh√¥ng t·ªìn t·∫°i")
        except json.JSONDecodeError:
            QtWidgets.QMessageBox.warning(self, "Error", "Error reading client.json!")
            print("‚ùå L·ªói: File client.json kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON")

        # Ki·ªÉm tra file personaltrainer.json
        try:
            with open(r"../dataset/personaltrainer.json", "r", encoding="utf-8") as f:
                trainers = json.load(f)
            trainer_emails = [trainer.get("Email", "").strip().lower() for trainer in trainers if trainer.get("Email")]
            all_emails.update(trainer_emails)
        except FileNotFoundError:
            QtWidgets.QMessageBox.warning(self, "Error", "File personaltrainer.json not found!")
            print("‚ùå L·ªói: File personaltrainer.json kh√¥ng t·ªìn t·∫°i")
        except json.JSONDecodeError:
            QtWidgets.QMessageBox.warning(self, "Error", "Error reading personaltrainer.json!")
            print("‚ùå L·ªói: File personaltrainer.json kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON")

        print("üìå Email nh·∫≠p v√†o:", email)
        return email in all_emails

    def send_otp_email(self):
        try:
            from FinalProject.ui.OTP.OTPEXT import OTPEXT
        except ImportError:
            QtWidgets.QMessageBox.critical(self.MainWindow, "Error", "Kh√¥ng th·ªÉ import OTPWindow. Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n!")
            print("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file OTPWindow")
            return

        email = self.lineEditEmail.text().strip()

        if not email:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", "B·∫°n ch∆∞a nh·∫≠p email!")
            print("‚ö† L·ªñI: Email nh·∫≠p v√†o b·ªã r·ªóng!")
            return

        if not self.check_email_exists(email):
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng!")
            print("‚ö† L·ªñI: Email kh√¥ng t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu")
            return

        self.otp = random.randint(100000, 999999)
        sender_email = "nhatkhoaledang@gmail.com"
        sender_password = "bhbt xmvw jiig ealw"

        msg = MIMEMultipart()
        msg['From'] = sender_email
        msg['To'] = email
        msg['Subject'] = "OTP Verification Code"
        msg.attach(MIMEText(f"Your OTP code is: {self.otp}", 'plain'))

        otp_file = r"../dataset/otp_data.json"
        try:
            with open(otp_file, "r", encoding="utf-8") as f:
                otp_data = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            otp_data = {}
            print("üìå File otp_data.json kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói, t·∫°o m·ªõi")

        otp_data[email] = self.otp
        with open(otp_file, "w", encoding="utf-8") as f:
            json.dump(otp_data, f, indent=4, ensure_ascii=False)

        try:
            server = smtplib.SMTP("smtp.gmail.com", 587)
            server.starttls()
            server.login(sender_email, sender_password)
            server.sendmail(sender_email, email, msg.as_string())
            server.quit()
            QtWidgets.QMessageBox.information(self.MainWindow, "Success", f"OTP ƒë√£ g·ª≠i ƒë·∫øn {email}!")
        except smtplib.SMTPAuthenticationError:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", "X√°c th·ª±c email th·∫•t b·∫°i. Ki·ªÉm tra email/m·∫≠t kh·∫©u!")
            print("‚ùå L·ªói: Th√¥ng tin ƒëƒÉng nh·∫≠p email kh√¥ng ƒë√∫ng")
            return
        except Exception as e:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", f"G·ª≠i OTP th·∫•t b·∫°i! L·ªói: {str(e)}")
            print(f"‚ùå L·ªói khi g·ª≠i email: {e}")
            return

        # ƒê√≥ng c·ª≠a s·ªï hi·ªán t·∫°i
        self.MainWindow.close()

        # T·∫°o v√† hi·ªÉn th·ªã OTPWindow
        self.otp_mainwindow = QtWidgets.QMainWindow()  # T·∫°o QMainWindow m·ªõi
        self.otp_window = OTPEXT()  # T·∫°o instance c·ªßa OTPWindow
        self.otp_window.setupUi(self.otp_mainwindow)  # G·∫Øn giao di·ªán v√†o QMainWindow
        self.otp_window.setForgotWindow(self)  # Truy·ªÅn ForgotPasswordWindow
        self.otp_window.setOTP(self.otp, email)  # Truy·ªÅn OTP v√† email
        self.otp_mainwindow.show()  # Hi·ªÉn th·ªã c·ª≠a s·ªï
    def process_return(self):
        self.MainWindow.close()
        if self.login_window:  # Ki·ªÉm tra xem login_window c√≥ t·ªìn t·∫°i kh√¥ng
            self.mainwindow = QtWidgets.QMainWindow()  # T·∫°o QMainWindow m·ªõi
            self.login_window.setupUi(self.mainwindow)  # S·ª≠ d·ª•ng l·∫°i instance LoginClientEXT
            self.mainwindow.show()
        else:
            # Tr∆∞·ªùng h·ª£p d·ª± ph√≤ng: n·∫øu login_window kh√¥ng ƒë∆∞·ª£c truy·ªÅn
            from FinalProject.ui.LoginClient.LoginClientEXT import LoginClientEXT
            self.mainwindow = QtWidgets.QMainWindow()
            self.myui = LoginClientEXT()
            self.myui.setupUi(self.mainwindow)
            self.mainwindow.show()