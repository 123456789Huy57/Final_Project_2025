import json
from PyQt6.QtWidgets import QMainWindow, QMessageBox, QApplication
from PyQt6 import QtWidgets
from FinalProject.ui.NewPassword.NewPassword import Ui_MainWindow
from FinalProject.ui.LoginClient.LoginClientEXT import LoginClientEXT  # Import ƒë·ªÉ m·ªü l·∫°i LoginClientEXT


class NewPasswordEXT(Ui_MainWindow):
    def setupUi(self, MainWindow):
        super().setupUi(MainWindow)
        self.MainWindow = MainWindow
        self.email = None
        self.login_window = None
        self.setupSignalAndSlot()

    def setEmail(self, email):
        self.email = email

    def setLoginWindow(self, login_window):
        self.login_window = login_window

    def setupSignalAndSlot(self):
        self.pushButtonUpdate.clicked.connect(self.update_password)
        self.pushButtonReturn.clicked.connect(self.process_return)

    def update_password(self):
        new_password = self.lineEditNewPassword.text().strip()
        confirm_password = self.lineEditConfirmNewPassword.text().strip()

        if not new_password or not confirm_password:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m·∫≠t kh·∫©u!")
            return

        if new_password != confirm_password:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!")
            return

        # C·∫≠p nh·∫≠t m·∫≠t kh·∫©u v√†o c·∫£ client.json v√† personaltrainer.json
        email_lower = self.email.lower()
        updated = False  # Theo d√µi xem c√≥ c·∫≠p nh·∫≠t th√†nh c√¥ng kh√¥ng

        # C·∫≠p nh·∫≠t client.json
        try:
            with open(r"../dataset/client.json", "r", encoding="utf-8") as f:
                users = json.load(f)
            for user in users:
                if user.get("Email", "").strip().lower() == email_lower:
                    user["Password"] = new_password
                    updated = True
                    print(f"üìå ƒê√£ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u cho {email_lower} trong client.json")
                    break
            with open(r"../dataset/client.json", "w", encoding="utf-8") as f:
                json.dump(users, f, indent=4, ensure_ascii=False)
        except FileNotFoundError:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", "File client.json not found!")
            print("‚ùå L·ªói: File client.json kh√¥ng t·ªìn t·∫°i")
        except json.JSONDecodeError:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", "Error reading client.json!")
            print("‚ùå L·ªói: File client.json kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON")
        except Exception as e:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", f"C·∫≠p nh·∫≠t client.json th·∫•t b·∫°i! L·ªói: {str(e)}")
            print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t client.json: {e}")

        # C·∫≠p nh·∫≠t personaltrainer.json
        try:
            with open(r"../dataset/personaltrainer.json", "r", encoding="utf-8") as f:
                trainers = json.load(f)
            for trainer in trainers:
                if trainer.get("Email", "").strip().lower() == email_lower:
                    trainer["Password"] = new_password
                    updated = True
                    print(f"üìå ƒê√£ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u cho {email_lower} trong personaltrainer.json")
                    break
            with open(r"../dataset/personaltrainer.json", "w", encoding="utf-8") as f:
                json.dump(trainers, f, indent=4, ensure_ascii=False)
        except FileNotFoundError:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", "File personaltrainer.json not found!")
            print("‚ùå L·ªói: File personaltrainer.json kh√¥ng t·ªìn t·∫°i")
        except json.JSONDecodeError:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", "Error reading personaltrainer.json!")
            print("‚ùå L·ªói: File personaltrainer.json kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON")
        except Exception as e:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error",
                                          f"C·∫≠p nh·∫≠t personaltrainer.json th·∫•t b·∫°i! L·ªói: {str(e)}")
            print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t personaltrainer.json: {e}")

        if updated:
            QtWidgets.QMessageBox.information(self.MainWindow, "Success", "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!")
            # Ngay l·∫≠p t·ª©c m·ªü l·∫°i LoginClientEXT sau khi c·∫≠p nh·∫≠t th√†nh c√¥ng
            self.MainWindow.close()
            self.mainwindow = QMainWindow()
            if self.login_window:
                self.login_window.setupUi(self.mainwindow)  # S·ª≠ d·ª•ng login_window ƒë√£ truy·ªÅn
            else:
                # N·∫øu kh√¥ng c√≥ login_window (tr∆∞·ªùng h·ª£p hi·∫øm), t·∫°o m·ªõi LoginClientEXT
                new_login_ui = LoginClientEXT()
                new_login_ui.setupUi(self.mainwindow)
            self.mainwindow.show()
            print("üìå ƒê√£ m·ªü l·∫°i LoginClientEXT")
        else:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng!")
            print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y {email_lower} trong c·∫£ client.json v√† personaltrainer.json")

    def process_return(self):
        self.MainWindow.close()
        if self.login_window:  # Ki·ªÉm tra xem login_window c√≥ t·ªìn t·∫°i kh√¥ng
            self.mainwindow = QtWidgets.QMainWindow()  # T·∫°o QMainWindow m·ªõi
            self.login_window.setupUi(self.mainwindow)  # S·ª≠ d·ª•ng l·∫°i instance LoginClientEXT
            self.mainwindow.show()
        else:
            # Tr∆∞·ªùng h·ª£p d·ª± ph√≤ng: n·∫øu login_window kh√¥ng ƒë∆∞·ª£c truy·ªÅn
            from FinalProject.ui.SendEmail.SendEmailEXT import ForgotPasswordWindow
            self.mainwindow = QtWidgets.QMainWindow()
            self.myui = ForgotPasswordWindow()
            self.myui.setupUi(self.mainwindow)
            self.mainwindow.show()


